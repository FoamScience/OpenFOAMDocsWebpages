<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Header Files on Automated API and Unit testing Docs for OpenFOAM libs</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/headers/</link><description>Recent content in Header Files on Automated API and Unit testing Docs for OpenFOAM libs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://foamscience.github.io/OpenFOAMDocsWebpages/api/headers/index.xml" rel="self" type="application/rss+xml"/><item><title>lib1/sample.C</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sample/</guid><description>namespace Foam { using coolType1 = int; using coolType2 = int; static constexpr int const intConstExpr = 42; } Foam::coolType1 using coolType1 = int; Global typedef using using. Not a typo :face_with_tears_of_joy:
Foam::coolType2 using coolType2 = int; Global typedef using typedef. Also not a typo :face_with_hand_over_mouth:
Foam::intConstExpr static constexpr int const intConstExpr = 42; An initialized constexpr</description></item><item><title>lib1/sampleBC/sampleBCFvPatchField.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchField/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchField/</guid><description>#define sampleBCFvPatchField_H namespace Foam { template &amp;lt;class Type&amp;gt; class sampleBCFvPatchField; }</description></item><item><title>lib1/sampleBC/sampleBCFvPatchFields.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchFields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchFields/</guid><description>#include &amp;#34;sampleBCFvPatchField.H&amp;#34; #define sampleBCFvPatchFields_H namespace Foam { }</description></item><item><title>lib2/sampleClass/sampleClass.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib2__sampleClass__sampleClass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib2__sampleClass__sampleClass/</guid><description>namespace Foam { class sampleClass; } Foam::sampleClass class sampleClass { public: enum class picker; sampleClass(int x); sampleClass(Foam::sampleClass&amp;amp;&amp;amp;) = default; sampleClass(Foam::sampleClass const&amp;amp;) = delete; Foam::sampleClass&amp;amp; operator=(Foam::sampleClass&amp;amp;&amp;amp;) = default; Foam::sampleClass&amp;amp; operator=(Foam::sampleClass const&amp;amp;) = delete; ~sampleClass(); int x() const; double operator()(); Foam::sampleClass&amp;amp; operator++(); Foam::sampleClass operator-(int&amp;amp;); }; Base interface to shape objects. A shape is basically a set of “surface” patches which define regions of closed volumes. Discretization can happen on both sides of these patches if required.</description></item></channel></rss>