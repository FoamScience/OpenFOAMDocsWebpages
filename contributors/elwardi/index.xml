<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MeshFreeFoam API Docs – Mohammed Elwardi Fadeli</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/contributors/elwardi/</link><description>Recent content in Mohammed Elwardi Fadeli on MeshFreeFoam API Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://foamscience.github.io/MeshFreeFoam-Docs/contributors/elwardi/index.xml" rel="self" type="application/rss+xml"/><item><title>Api: meshfree/includes/addToTemplatedRunTimeSelection.H</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__addToTemplatedRunTimeSelection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__addToTemplatedRunTimeSelection/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define addToTemplatedRunTimeSelection_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#579">#define makeTemplatedModel(baseType, childType, TargName, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A set of macros to have a variable number of template arguments working with OpenFOAM’s RunTime Selection mechanism.&lt;/p>
&lt;p>Recycled from &lt;a href="https://github.com/FoamScience/OpenFOAM-Templated-RunTime-Selection">OpenFOAM-TRTS repo&lt;/a>&lt;/p>
&lt;p>&lt;a style="visibility: hidden;" id="standardese-maketemplatedmodel" href="#standardese-maketemplatedmodel">&lt;/a>&lt;/p>
&lt;h2 id="maketemplatedmodel">makeTemplatedModel&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define makeTemplatedModel(baseType, childType, TargName, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Macro to add a templated model to the run-time selection table&lt;/p>
&lt;hr /></description></item><item><title>Api: meshfree/includes/meshlessConcepts.H</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__meshlessConcepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__meshlessConcepts/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define meshlessConcepts_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> mff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> PositionType &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t){{T&lt;span style="color:#333">::&lt;/span>nComponents}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">int&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>;{std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>T, VectorSpace&lt;span style="color:#333">&amp;lt;&lt;/span>Vector&lt;span style="color:#333">&amp;lt;&lt;/span>scalar&lt;span style="color:#333">&amp;gt;&lt;/span>, scalar, T&lt;span style="color:#333">::&lt;/span>nComponents&lt;span style="color:#333">&amp;gt;&amp;gt;&lt;/span>};}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Cmpt&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> RAContainer &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Cmpt c){std&lt;span style="color:#333">::&lt;/span>ranges&lt;span style="color:#333">::&lt;/span>random_access_range&lt;span style="color:#333">&amp;lt;&lt;/span>Cmpt&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Point&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> CallableWithPositions &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Point p){{t(p)}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>scalar&lt;span style="color:#333">&amp;gt;&lt;/span>;PositionType&lt;span style="color:#333">&amp;lt;&lt;/span>Point&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Point&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> Shape &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Point p){{t.contains(p)}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">bool&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Concepts that enable meta-programming in the core meshless library&lt;/p>
&lt;p>&lt;a style="visibility: hidden;" id="standardese-foam__mff__positiontype" href="#standardese-foam__mff__positiontype">&lt;/a>&lt;/p>
&lt;h3 id="foammffpositiontype">Foam::mff::PositionType&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> PositionType &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t){{T&lt;span style="color:#333">::&lt;/span>nComponents}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">int&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>;{std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>T, VectorSpace&lt;span style="color:#333">&amp;lt;&lt;/span>Vector&lt;span style="color:#333">&amp;lt;&lt;/span>scalar&lt;span style="color:#333">&amp;gt;&lt;/span>, scalar, T&lt;span style="color:#333">::&lt;/span>nComponents&lt;span style="color:#333">&amp;gt;&amp;gt;&lt;/span>};}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Concept checking that a type is a VectorSpace instance with scalar components. The number of components needs to be a constexpr from &lt;code>T::dim&lt;/code>&lt;/p>
&lt;hr />
&lt;p>&lt;a style="visibility: hidden;" id="standardese-foam__mff__racontainer" href="#standardese-foam__mff__racontainer">&lt;/a>&lt;/p>
&lt;h3 id="foammffracontainer">Foam::mff::RAContainer&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Cmpt&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> RAContainer &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Cmpt c){std&lt;span style="color:#333">::&lt;/span>ranges&lt;span style="color:#333">::&lt;/span>random_access_range&lt;span style="color:#333">&amp;lt;&lt;/span>Cmpt&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Concept checking for requirements of OpenFOAM containers with random access iterators&lt;/p>
&lt;hr />
&lt;p>&lt;a style="visibility: hidden;" id="standardese-foam__mff__callablewithpositions" href="#standardese-foam__mff__callablewithpositions">&lt;/a>&lt;/p>
&lt;h3 id="foammffcallablewithpositions">Foam::mff::CallableWithPositions&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Point&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> CallableWithPositions &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Point p){{t(p)}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>scalar&lt;span style="color:#333">&amp;gt;&lt;/span>;PositionType&lt;span style="color:#333">&amp;lt;&lt;/span>Point&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Concept checking for requirements of callables with positions and returning a scalar&lt;/p>
&lt;hr />
&lt;p>&lt;a style="visibility: hidden;" id="standardese-foam__mff__shape" href="#standardese-foam__mff__shape">&lt;/a>&lt;/p>
&lt;h3 id="foammffshape">Foam::mff::Shape&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>, &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">Point&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>&lt;span style="color:#080;font-weight:bold">concept&lt;/span> Shape &lt;span style="color:#333">=&lt;/span> &lt;span style="color:#080;font-weight:bold">requires&lt;/span>(T t, Point p){{t.contains(p)}&lt;span style="color:#333">-&amp;gt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>convertible_to&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">bool&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Concept checking for requirements of shape types&lt;/p>
&lt;hr /></description></item><item><title>Api: meshfree/includes/TemplatedRunTimeSelection.H</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__TemplatedRunTimeSelection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__includes__TemplatedRunTimeSelection/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define TemplatedRunTimeSelection_H
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#579">#define defineVariadicTemplatedRunTimeSelectionTablePtr(baseType, argNames, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#579">#define defineVariadicTemplatedRunTimeSelectionTable(baseType, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A set of macros to define runtime selection tables for templates with variadic arguments Recycled from &lt;a href="https://github.com/FoamScience/OpenFOAM-Templated-RunTime-Selection">OpenFOAM-TRTS repo&lt;/a>&lt;/p>
&lt;p>&lt;a style="visibility: hidden;" id="standardese-definevariadictemplatedruntimeselectiontableptr" href="#standardese-definevariadictemplatedruntimeselectiontableptr">&lt;/a>&lt;/p>
&lt;h2 id="definevariadictemplatedruntimeselectiontableptr">defineVariadicTemplatedRunTimeSelectionTablePtr&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define defineVariadicTemplatedRunTimeSelectionTablePtr(baseType, argNames, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Macro to define a base-RTS templated model with variadic arguments&lt;/p>
&lt;hr />
&lt;p>&lt;a style="visibility: hidden;" id="standardese-definevariadictemplatedruntimeselectiontable" href="#standardese-definevariadictemplatedruntimeselectiontable">&lt;/a>&lt;/p>
&lt;h2 id="definevariadictemplatedruntimeselectiontable">defineVariadicTemplatedRunTimeSelectionTable&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#579">#define defineVariadicTemplatedRunTimeSelectionTable(baseType, Targs...)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Macro to define a dictionary-RTS templated model with variadic arguments&lt;/p>
&lt;hr /></description></item><item><title>Api: meshfree/kdTrees/nanoflannKDTree/nanoflannKDTrees.C</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__kdTrees__nanoflannKDTree__nanoflannKDTrees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__kdTrees__nanoflannKDTree__nanoflannKDTrees/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> mff
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">nanoflannKDTree&lt;/span>&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D, List&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D&lt;span style="color:#333">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">nanoflannKDTree&lt;/span>&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D, Field&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D&lt;span style="color:#333">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">nanoflannKDTree&lt;/span>&lt;span style="color:#333">&amp;lt;&lt;/span>vector, List&lt;span style="color:#333">&amp;lt;&lt;/span>vector&lt;span style="color:#333">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">nanoflannKDTree&lt;/span>&lt;span style="color:#333">&amp;lt;&lt;/span>vector, Field&lt;span style="color:#333">&amp;lt;&lt;/span>vector&lt;span style="color:#333">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Force instantiations of nanoflannKDTree for 2D and 3D domains but explitcit instantiation&lt;/p></description></item><item><title>Api: meshfree/shapes/basicShape/basicShapes.C</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__shapes__basicShape__basicShapes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__shapes__basicShape__basicShapes/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">using&lt;/span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">using&lt;/span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D&lt;span style="color:#333">&amp;gt;::&lt;/span>dictionaryConstructorCompatTableType&lt;span style="color:#333">&amp;amp;&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector2D&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorCompatTable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> &lt;span style="color:#339;font-weight:bold">void&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector2D&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorTablePtr_construct(&lt;span style="color:#339;font-weight:bold">bool&lt;/span> load);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>vector2D&lt;span style="color:#333">&amp;gt;::&lt;/span>dictionaryConstructorPtr Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector2D&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorTable(&lt;span style="color:#333">::&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span>&lt;span style="color:#333">&amp;amp;&lt;/span> k);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>vector&lt;span style="color:#333">&amp;gt;::&lt;/span>dictionaryConstructorCompatTableType&lt;span style="color:#333">&amp;amp;&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorCompatTable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> &lt;span style="color:#339;font-weight:bold">void&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorTablePtr_construct(&lt;span style="color:#339;font-weight:bold">bool&lt;/span> load);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">static&lt;/span> mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>vector&lt;span style="color:#333">&amp;gt;::&lt;/span>dictionaryConstructorPtr Foam&lt;span style="color:#333">::&lt;/span>mff&lt;span style="color:#333">::&lt;/span>basicShape&lt;span style="color:#333">&amp;lt;&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>Vector&lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#339;font-weight:bold">double&lt;/span>&lt;span style="color:#333">&amp;gt;&amp;gt;::&lt;/span>dictionaryConstructorTable(&lt;span style="color:#333">::&lt;/span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span>&lt;span style="color:#333">&amp;amp;&lt;/span> k);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Force instantiations of basicShape for 2D and 3D shapes&lt;/p>
&lt;p>&lt;a style="visibility: hidden;" id="standardese-typename" href="#standardese-typename">&lt;/a>&lt;/p>
&lt;h2 id="typename">typeName&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2D basic shape&lt;/p>
&lt;hr />
&lt;p>&lt;a style="visibility: hidden;" id="standardese-typename" href="#standardese-typename">&lt;/a>&lt;/p>
&lt;h2 id="typename-1">typeName&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3D basic shape&lt;/p>
&lt;hr /></description></item><item><title>Api: meshfree/shapes/triSurfaceShape/triSurfaceShapes.C</title><link>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__shapes__triSurfaceShape__triSurfaceShapes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/MeshFreeFoam-Docs/api/doc_meshfree__shapes__triSurfaceShape__triSurfaceShapes/</guid><description>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">//=== author:Elwardi ===//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888">&lt;/span>&lt;span style="color:#080;font-weight:bold">using&lt;/span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">using&lt;/span> &lt;span style="color:#080;font-weight:bold">namespace&lt;/span> Foam&lt;span style="color:#333">::&lt;/span>mff;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Force instantiations of 3D triSurfaceShapes&lt;/p>
&lt;p>&lt;a style="visibility: hidden;" id="standardese-typename" href="#standardese-typename">&lt;/a>&lt;/p>
&lt;h2 id="typename">typeName&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Foam&lt;span style="color:#333">::&lt;/span>word &lt;span style="color:#080;font-weight:bold">const&lt;/span> typeName;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Register a 3D triangular surface shape as a basic shape&lt;/p>
&lt;hr /></description></item></channel></rss>