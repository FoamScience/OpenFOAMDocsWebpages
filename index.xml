<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ODW on Automated API and Unit testing Docs for OpenFOAM libs</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/</link><description>Recent content in ODW on Automated API and Unit testing Docs for OpenFOAM libs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://foamscience.github.io/OpenFOAMDocsWebpages/index.xml" rel="self" type="application/rss+xml"/><item><title>Example Page</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/example-page/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/example-page/</guid><description>This is a placeholder page. Replace it with your own content.
Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).
There should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade.</description></item><item><title>Installation</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/installation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/installation/</guid><description>Prerequisites Standardese, which we commend you compile from source. An Extended Hugo version (newer than v 0.110.0) Bear for generating compilation database while compiling the code. Whatever the requirements file specifies foamUT if you want to include docs for unit tests. You may take a look at the Apptainer definition file for a quick inspiration on how to install everything that is needed.
Get a copy of the ODW repository You can either use the original ODW as a Template repository, or just fork it the usual way.</description></item><item><title>API docs generation</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/api-docs/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/api-docs/</guid><description>API documentation (somewhat) relies on in-comments documentation written by the developer, but standardese seems to check it against the actual function signature to make sure the comments don&amp;rsquo;t get outdated. We think that this is still a nice compromise.
Here is a typical workflow to generate API documentation for a repository that manages both the code and documentation website:
Note that it&amp;rsquo;s not recommended to merge the actual code with the docs website.</description></item><item><title>Unit-tests docs generation</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/ut-docs/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/docs/getting-started/ut-docs/</guid><description>All the heavy-lifting is actually done bu foamUT itself, so if you have some unit tests under tests/ folder, they will run and the output is converted over to the webpages under /tests URL. It&amp;rsquo;s important to note that your tests must compile as we cannot generate reports on tests that do not compile.
Here is a typical workflow to generate documentation for a repository with some Unit tests:
# Clone the repo which has the code (src/ and test/ folder, where your OpenFOAM libs should reside) git clone https://github.</description></item><item><title>Easy API documentation with Hugo and Standardese</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/blog/2024/08/01/easy-api-documentation-with-hugo-and-standardese/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/blog/2024/08/01/easy-api-documentation-with-hugo-and-standardese/</guid><description>Initial work on the companion website project for documenting the design and implementation
of my PhD project (Meshless methods in CFD applications) has been completed. The project
is in a stable state hence made available for the wide public to use. As always, all kinds of PRs are
very much welcome!</description></item><item><title>No Releases?</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/blog/2023/08/19/no-releases/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/blog/2023/08/19/no-releases/</guid><description>This Hugo template can be used as a template to spin off new websites. Currently, I see
no need to create releases. Just fork and clone the main branch!</description></item><item><title>About ODW</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/about/</guid><description>About ODW OpenFOAM-Docs-Webpages (ODW) is a sample site using the Docsy
Hugo theme and standardese to generate stunning
and actually useful documentation pages which stay up-to-date with minimal effort.
It&amp;rsquo;s for the lazy lots of us who write OpenFOAM code frequently and want to document it
in a way that&amp;rsquo;s actually decent to look at and browse. Reading source code files is still
better though&amp;hellip;
Three sections are natively supported; though there is nothing holding you back of adding more:</description></item><item><title>lib1/sample.C</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sample/</guid><description>namespace Foam { using coolType1 = int; using coolType2 = int; static constexpr int const intConstExpr = 42; } Foam::coolType1 using coolType1 = int; Global typedef using using. Not a typo :face_with_tears_of_joy:
Foam::coolType2 using coolType2 = int; Global typedef using typedef. Also not a typo :face_with_hand_over_mouth:
Foam::intConstExpr static constexpr int const intConstExpr = 42; An initialized constexpr</description></item><item><title>lib1/sampleBC/sampleBCFvPatchField.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchField/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchField/</guid><description>#define sampleBCFvPatchField_H namespace Foam { template &amp;lt;class Type&amp;gt; class sampleBCFvPatchField; }</description></item><item><title>lib1/sampleBC/sampleBCFvPatchFields.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchFields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib1__sampleBC__sampleBCFvPatchFields/</guid><description>#include &amp;#34;sampleBCFvPatchField.H&amp;#34; #define sampleBCFvPatchFields_H namespace Foam { }</description></item><item><title>lib2/sampleClass/sampleClass.H</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib2__sampleClass__sampleClass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/api/doc_lib2__sampleClass__sampleClass/</guid><description>namespace Foam { class sampleClass; } Foam::sampleClass class sampleClass { public: enum class picker; sampleClass(int x); sampleClass(Foam::sampleClass&amp;amp;&amp;amp;) = default; sampleClass(Foam::sampleClass const&amp;amp;) = delete; Foam::sampleClass&amp;amp; operator=(Foam::sampleClass&amp;amp;&amp;amp;) = default; Foam::sampleClass&amp;amp; operator=(Foam::sampleClass const&amp;amp;) = delete; ~sampleClass(); int x() const; double operator()(); Foam::sampleClass&amp;amp; operator++(); Foam::sampleClass operator-(int&amp;amp;); }; Base interface to shape objects. A shape is basically a set of “surface” patches which define regions of closed volumes. Discretization can happen on both sides of these patches if required.</description></item><item><title>Search Results</title><link>https://foamscience.github.io/OpenFOAMDocsWebpages/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://foamscience.github.io/OpenFOAMDocsWebpages/search/</guid><description/></item></channel></rss>